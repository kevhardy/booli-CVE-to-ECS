""" Helper module for retrieving CVE results from NVD Vulnerabilty API"""

import sys
import time
import urllib.parse
from json import JSONDecodeError

import requests

NVD_API_CVES = "https://services.nvd.nist.gov/rest/json/cves/1.0/"

def __get_page_cves(res_json):
    """ Returns a list of all CVEs from one page on a request"""

    if "CVE_Items" in res_json["result"]:
        cve_items = res_json["result"]["CVE_Items"]
    else:
        print("No CVE Items in results.")
        print(f"Response: {res_json}")
        sys.exit()

    cves = []
    for cve_item in cve_items:
        if "cve" not in cve_item:
            print("No CVE in this item. CVE Required in each item.")
            continue
        cves.append(cve_item)

    return cves

def get_all_cves(parameters):
    """ Retrieves all CVEs items for parameters. Multiple requests
        made if total results exceed page limit
    """

    # Rate limit with an API key is 100 requests in a rolling 60 second window
    # Without a key it is 10 requests in a rolling 60 second window
    # Added a small buffer to avoid ever hitting the limit
    delay_limit = 8
    if "apiKey" in parameters:
        delay_limit = 0.8

    # Page Limit is 20 by default.
    # Can be set up to a maximum of 2000
    page_limit = 20
    if "resultsPerPage" in parameters:
        if parameters["resultsPerPage"] <= 2000:
            page_limit = parameters["resultsPerPage"]
        else:
            page_limit = 2000

    para_str = urllib.parse.urlencode(parameters, safe=': %')
    res = requests.get(NVD_API_CVES, params=para_str)

    try:
        res_json = res.json()
    except JSONDecodeError:
        print("Couldn't convert response to JSON. Check parameters")
        print(f"Parameters: {parameters}")
        sys.exit()

    if not res_json or "totalResults" not in res_json or res_json["totalResults"] == 0:
        print("No results in this search.")
        print(f"Parameters: {parameters}")
        sys.exit()

    total_results = res_json["totalResults"]
    cves = __get_page_cves(res_json)

    # If total results are all on one page, no more requests needed
    if total_results <= page_limit:
        return cves

    # Retrieves rest of results on remaining pages
    pages = (total_results // page_limit) + 1
    start_index = page_limit
    for cur_page in range(pages):
        parameters['startIndex'] = start_index
        time.sleep(delay_limit)
        para_str = urllib.parse.urlencode(parameters, safe=': %')
        res = requests.get(NVD_API_CVES, params=para_str)

        try:
            res_json = res.json()
        except JSONDecodeError:
            print("Couldn't convert response to JSON. Check parameters")
            print(f"Parameters: {parameters}")
            sys.exit()

        cves = cves + __get_page_cves(res_json)
        start_index += page_limit

    return cves

def format_time(date):
    """ Formats time from a datetime for NVD API in form 'yyyy-MM-ddTHH:mm:ss:SSS Z' """
    iso_date = date.isoformat(timespec="milliseconds").replace(".",":")
    return f"{iso_date}%20UTC%2B00:00"
