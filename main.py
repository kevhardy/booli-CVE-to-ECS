''' 
    Main file - Retrieves and prints all published CVEs in the last 
    120 days and maps as many fields to the ECS fields as possible
'''

import json
from datetime import datetime, timedelta

from dotenv import dotenv_values

import nvdcves


def main():
    
    # Load NVD API key from .env file if exists.
    # Will be slower without a key
    config = dotenv_values(".env")
    API_KEY = None
    if "API_KEY" in config:
        API_KEY = config["API_KEY"]
        
    # Amount of cve results per request. Maximum 2000
    RESULTS_PER_PAGE = 2000
        
    # Calculate time from 120 days ago to now
    date_end = datetime.utcnow()
    date_start = date_end - timedelta(days=120)

    parameters = {
        'modStartDate': nvdcves.format_time(date_start),
        'modEndDate': nvdcves.format_time(date_end),
        'resultsPerPage': RESULTS_PER_PAGE,
    }
    if API_KEY:
        parameters["apiKey"] = API_KEY

    # Convert all cves into a ECS
    cves = nvdcves.get_all_cves(parameters)
    ecs_results = [cve_to_ecs(cve) for cve in cves]
    
    print(json.dumps(ecs_results))
        
        
def cve_to_ecs(cve):
    """ Returns an ECS equivalent from a CVE"""
    ecs = { "vulnerability": { "score": {}, "enumeration": "CVE" } } 
    
    for key in cve.keys():
        if key == "cve":
            for cve_data in cve["cve"].keys():
                if cve_data == "CVE_data_meta":
                    ecs["vulnerability"]["id"] = cve["cve"]["CVE_data_meta"]["ID"]

                if cve_data == "description":
                    description_data = cve["cve"]["description"]["description_data"][0]
                    for description in description_data:
                        if description == "value":
                            ecs["vulnerability"]["description"] = description_data["value"]
                
                if cve_data == "references":
                    if len(cve["cve"]["references"]["reference_data"]) > 0:
                        reference_url = cve["cve"]["references"]["reference_data"][0]["url"]
                        ecs["vulnerability"]["reference"] = reference_url
        
        if key == "impact":
            # if more than one metric used we will use cvssV3
            skipV2 = False
            if len(cve["impact"].keys()) >= 2:
                skipV2 = True
            for metric in cve["impact"].keys():
                
                # CVSS v3
                if metric == "baseMetricV3":
                    ecs["vulnerability"]["classification"] = "CVSS"
                    cvssv3 = cve["impact"]["baseMetricV3"]["cvssV3"]
                    for cvss_data in cvssv3.keys():
                        if cvss_data == "version":
                            ecs["vulnerability"]["score"]["version"] = cvssv3["version"]
                        if cvss_data == "baseScore":
                            ecs["vulnerability"]["score"]["base"] = cvssv3["baseScore"]
                        if cvss_data == "attackVector":
                            ecs["vulnerability"]["category"] = [cvssv3["attackVector"]]
                        if cvss_data == "baseSeverity":
                            ecs["vulnerability"]["severity"] = cvssv3["baseSeverity"]
                
                # CVSS v2 if v3 doesn't exist
                if metric == "baseMetricV2" and not skipV2:
                    ecs["vulnerability"]["classification"] = "CVSS"
                    cvssv2 = cve["impact"]["baseMetricV2"]["cvssV2"]
                    for cvss_data in cvssv2.keys():
                        if cvss_data == "version":
                            ecs["vulnerability"]["score"]["version"] = cvssv2["version"]
                        if cvss_data == "baseScore":
                            ecs["vulnerability"]["score"]["base"] = cvssv2["baseScore"]
                        if cvss_data == "attackVector":
                            ecs["vulnerability"]["category"] = [cvssv2["accessVector"]]
                    ecs["vulnerability"]["severity"] = cve["impact"]["baseMetricV2"]["severity"]
        
        if key == "publishedDate":
            pass
        
        if key == "lastModifiedDate":
            pass
    
    if len(ecs["vulnerability"]["score"].keys()) == 0:
        ecs["vulnerability"].pop("score")
    
    return ecs
    

if __name__ == "__main__":
    main()
